on:
  push:
    branches: [main]
  pull_request:

name: Continuous integration

jobs:
  build:
    name: Test ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-14
          - ubuntu-22.04

    runs-on: ${{ matrix.os }}
    steps:
    - name: Check out source code
      uses: actions/checkout@v4

    - name: "Install build dependencies"
      if: matrix.os == 'macos-14'
      run: brew install ninja

    - name: "Install build dependencies"
      if: matrix.os == 'ubuntu-22.04'
      run: sudo apt install -y cmake ninja-build

    - name: Restore LLVM cache
      id: llvm-cache
      uses: actions/cache@v4
      with:
        path: llvm
        key: ${{ runner.os }}-llvm-cache-6.0.3

    # https://github.com/swiftlang/llvm-project/releases/tag/swift-6.0.3-RELEASE
    - name: "LLVM: Download"
      if: steps.llvm-cache.outputs.cache-hit != 'true'
      run: wget https://github.com/swiftlang/llvm-project/archive/refs/tags/swift-6.0.3-RELEASE.tar.gz

    - name: "LLVM: Decompress"
      if: steps.llvm-cache.outputs.cache-hit != 'true'
      run: tar -xzf swift-6.0.3-RELEASE.tar.gz && mv llvm-project-swift-6.0.3-RELEASE llvm && rm swift-6.0.3-RELEASE.tar.gz

    - name: "LLVM: CMake"
      if: steps.llvm-cache.outputs.cache-hit != 'true'
      # Configure a minimal LLVM build for our needs: Only clang, only one architecture.
      # https://llvm.org/docs/CMake.html
      #
      # GitHub runners have very limited disk storage, so use MinSizeRel to avoid filling
      # up the disk.
      run: cd llvm && mkdir build && cmake -S llvm -B build -G Ninja -DLLVM_ENABLE_PROJECTS='clang' -DCMAKE_BUILD_TYPE=MinSizeRel -DLLVM_TARGETS_TO_BUILD=X86 -DLLVM_PARALLEL_LINK_JOBS=2

    - name: "LLVM: Build"
      if: steps.llvm-cache.outputs.cache-hit != 'true'
      run: cd llvm/build && ninja IndexStore FileCheck

    - name: "index-import: CMake"
      run: mkdir build && cmake -B build -G Ninja -DClang_DIR=./llvm/build/lib/cmake/clang/ -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++

    - name: "index-import: Build"
      run: cd build && ninja

    - name: "index-import: test"
      run: |
        PATH=$PWD/llvm/build/bin:$PATH ./tests/run.sh

  # For local development, use the playground at
  # https://rhysd.github.io/actionlint/
  actionlint:
    name: Actionlint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: raven-actions/actionlint@v2
        with:
          shellcheck: false
